---

- name: "get facts of installed packages"
  package_facts:
    manager: "auto"

- name: install dnsmasq packages centos
  package:
    name: 
      - dnsmasq
      - bind-utils
    state: present
  when:
    ansible_os_family == "RedHat"

- name: install dnsmasq packages ubuntu
  package:
    name: 
      - dnsmasq
      - dnsutils
    state: present
  when:
    ansible_os_family == "Debian"

- name: disable update resolv conf of network manager
  copy: src=NetworkManager.conf dest=/etc/NetworkManager/NetworkManager.conf mode=0644
  when: "'NetworkManager' is in ansible_facts.packages"      

- name: configure dhclient
  template:
    src: dhclient.conf.j2
    dest: /etc/dhcp/dhclient.conf
    mode: 0644      
  when: "'dhclient' is in ansible_facts.packages"      

- name: restart NetworkManager if its installed
  service:
    name: NetworkManager
    state: restarted
    enabled: yes   
  when: "'NetworkManager' is in ansible_facts.packages"      

- name: collect nameservers
  shell: "cat /etc/resolv.conf | grep -i '^nameserver' | cut -d ' ' -f2"
  register: nameservers_output

- name: collect dns search list
  shell: "cat /etc/resolv.conf | grep -i '^search' | cut -d ' ' -f2- | tr ' ' '\n'"
  register: dns_search_list_output

- name: set nameservers
  set_fact:
    nameservers: "{{ nameservers_output.stdout_lines }}"

- name: set dns search list
  set_fact:
    domain_search_list: "{{ dns_search_list_output.stdout_lines }}"

- name: check if systemd-revolve file exists
  stat:
    path: "/etc/systemd/resolved.conf"
  register: systemd_resolve_result

- name: configure systemd-resolved
  community.general.ini_file:
    path: "/etc/systemd/resolved.conf"
    section: Resolve
    option: DNS
    value: "127.0.0.1 {{ dns1 }} {{ dns2 }}"
  when: systemd_resolve_result.stat.exists    

- name: except docker interface
  lineinfile: 
    dest: "/etc/dnsmasq.conf"
    create: yes 
    state: present 
    regexp: "^except-interface=*" 
    line: "except-interface=docker0" 

- name: set bind interface
  lineinfile: 
    dest: "/etc/dnsmasq.conf"
    create: yes 
    state: present 
    regexp: "^bind-interfaces*" 
    line: "bind-interfaces" 

- name: ensure dnsmasq.d directory exists
  file:
    path: /etc/dnsmasq.d/
    state: directory

- name: configure dnsmasq for mesos-dns
  template:
    src: 20-mesos
    dest: /etc/dnsmasq.d/20-mesos
    mode: 0644    

- name: configure dnsmasq custom settings 
  template:
    src: 01-custom-settings
    dest: /etc/dnsmasq.d/01-custom-settings
    mode: 0644    

- name: Restart dnsmasq
  service:
    name: dnsmasq
    state: restarted
  when: restart | bool

- name: enable and start dnsmasq
  service:
    name: dnsmasq
    state: started
    enabled: yes

- name: add dnsmasq to /etc/resolv.conf
  template:
    src: resolv.conf.j2
    dest: /etc/resolv.conf
    mode: 0644

- name: add dnsmasq to /etc/resolv.conf.head
  template:
    src: resolv.conf.head.j2
    dest: /etc/resolv.conf.head
    mode: 0644

- name: add custom netplan
  template:
    src: 01-netcfg.yaml.j2
    dest: /etc/netplan/01-netcfg.yaml
    mode: 0644
  when: "'netplan.io' is in ansible_facts.packages"      

- name: apply netplan
  shell: "netplan apply"
  when: "'netplan.io' is in ansible_facts.packages"      
